<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MD5算法原理与实现</title>
    <link href="/2023/06/12/MD5%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/06/12/MD5%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>记录一下课设。</p><h3 id="什么是MD5算法？"><a href="#什么是MD5算法？" class="headerlink" title="什么是MD5算法？"></a>什么是MD5算法？</h3><p>以下从<a href="https://baike.baidu.com/item/MD5/212708?fromtitle=MD5%E7%AE%97%E6%B3%95&fromid=174909&fr=aladdin">百度百科</a>摘录：</p><blockquote><p>MD5信息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。</p></blockquote><p>简单来说，MD5是一种信息摘要算法，也是一种hash算法，用于保证信息传输的完整性。</p><p>MD5算法有以下特点：</p><ul><li><p>不可逆性：已知算法的具体实现，但无法通过逆向计算得到原数据。</p></li><li><p>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</p></li><li><p>容易计算：从原数据计算出MD5值很容易。</p></li><li><p>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的 MD5值都有很大区别。</p></li><li><p>弱抗碰撞：已知原数据和其 MD5值，想找到一个具有相同 MD5值的数据（即伪造数据）是非常困难的。</p></li><li><p>强抗碰撞：想找到两个不同的数据，使它们具有相同的 MD5值，是非常困难的。</p></li></ul><p>具体介绍：<a href="https://en.wikipedia.org/wiki/MD5">维基百科</a></p><h3 id="MD5算法原理"><a href="#MD5算法原理" class="headerlink" title="MD5算法原理"></a>MD5算法原理</h3><p>MD5是输入不定长度信息，可以是一个文件或者一段文本，输出固定长度128bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128 bits 散列。基本方式为，求余、取余、调整长度、与链接变量进行循环运算，得出结果。</p><h5 id="步骤一-填充"><a href="#步骤一-填充" class="headerlink" title="步骤一 填充"></a>步骤一 填充</h5><p>MD5算法以512-bits为一个分组来处理输入的信息，且每一个分组又被分成16个32 bits子分组，而且最后一个512 bits分组的后64 bits用来存放原数据的长度。</p><p>一般来说，输入的信息长度 L mod 512 不等于 448，因此我们先将输入的信息按照512 bits为一组，划分成多个分组，并将最后一个分组进行填充，使得填充后的信息长度 L’ mod 512 等于 448。填充方式为：先填充一个1(占 1 bits)，然后全部填充0。</p><p>特别的，如果 L mod 512 恰好等于 448，也是要进行填充的，我们只要按照填充方法填充一个512 bits的pad就行了。</p><p>最后把64 bits的长度信息附加在最后面构成一个512 bits的分组。</p><p>假设信息的总长度为x-bits，那么我们需要填充 (512 + ( 448 - x ) ) mod 512 bits。</p><p>OK，talk is cheap，show me the code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> array <span class="hljs-keyword">import</span> array<br><br>...<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pad</span>(<span class="hljs-params">data: array</span>) -&gt; array:<br>    dlen = data.buffer_info()[<span class="hljs-number">1</span>] * data.itemsize * <span class="hljs-number">8</span><br>    m = dlen % <span class="hljs-number">512</span><br>    plen = (<span class="hljs-number">512</span> + (<span class="hljs-number">448</span> - m)) % <span class="hljs-number">512</span><br>    <span class="hljs-comment"># 如果dlen mod 512 == 448，那么我们要填充512bits</span><br>    <span class="hljs-keyword">if</span> plen == <span class="hljs-number">0</span>:<br>        plen = <span class="hljs-number">512</span><br>    plen = plen // <span class="hljs-number">8</span><br>    pad = array(<span class="hljs-string">&#x27;B&#x27;</span>, [<span class="hljs-number">0x80</span>] + [<span class="hljs-number">0x00</span>] * (plen - <span class="hljs-number">1</span>))<span class="hljs-comment"># 10000000 0000...</span><br>    len_pad = <span class="hljs-built_in">int</span>.to_bytes(dlen, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br>    pad.extend(len_pad) <span class="hljs-comment"># 附加64bits长度信息</span><br>    pad = array(<span class="hljs-string">&#x27;B&#x27;</span>, pad.tobytes())<br><br>    <span class="hljs-keyword">return</span> pad<br><br>...<br></code></pre></td></tr></table></figure><h5 id="步骤二-初始化A，B，C，D四个寄存器"><a href="#步骤二-初始化A，B，C，D四个寄存器" class="headerlink" title="步骤二 初始化A，B，C，D四个寄存器"></a>步骤二 初始化A，B，C，D四个寄存器</h5><p>我们先将四个幻数装入A,B,C,D四个寄存器</p><p>标准的幻数（物理顺序）是（A&#x3D;(01234567)16，B&#x3D;(89ABCDEF)16，C&#x3D;(FEDCBA98)16，D&#x3D;(76543210)16）。如果在字节序为小端的系统中定义应该是（A&#x3D;0X67452301L，B&#x3D;0XEFCDAB89L，C&#x3D;0X98BADCFEL，D&#x3D;0X10325476L），注：L表示字节序为小端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">A = <span class="hljs-number">0x67452301</span><br>B = <span class="hljs-number">0xEFCDBA89</span><br>C = <span class="hljs-number">0x98ABDCFE</span><br>D = <span class="hljs-number">0x10325476</span><br></code></pre></td></tr></table></figure><h5 id="步骤三-循环运算"><a href="#步骤三-循环运算" class="headerlink" title="步骤三 循环运算"></a>步骤三 循环运算</h5><p>循环的次数是分组数N，在运算过程中要将每一个分组分成16个子分组，每个子分组 32 bits。</p><p>在运算前，我们先来认识四个非线性函数：</p><ul><li><code>F(x, y, z) =&gt; (x &amp; y) | ((~x) &amp; z) </code></li><li><code>G(x, y, z) =&gt; (x &amp; z) | (y &amp; (~z))</code></li><li><code>H(x, y, z) =&gt; x ^ y ^ z</code></li><li><code>I(x, y, z) =&gt; y ^ (x | (~z))</code></li></ul><p>还有一个Disturb Functions：</p><p><code>DF(a, b, c, d, Mj, S, Ti, func) =&gt; a = b + circle_shift(a + func(b, c, d) + Mj + Ti, S) </code></p><p>一般这个DF会写成4个函数，分别是FF,GG,HH,II，他们的函数体跟DF一样，只要把DF中的func分别替换为F,G,H,I就可以得到FF,GG,HH,II。也就是说DF(A,B,C,D,Mj,S,Ti,F) &#x3D;&#x3D; FF(A,B,C,D,Mj,S,Ti)，其他的同理。</p><p>其中<strong>circle_shift</strong>函数用来循环左移，<strong>func函数</strong>是上面四个非线性函数中的某一个，<strong>Mj</strong>是一个子分组(32bits)，<strong>Ti</strong>是常数表中的第i项。</p><p>用Python实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python">...<br><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><span class="hljs-comment"># 常量表</span><br>T = [floor(<span class="hljs-number">4294967296</span> * <span class="hljs-built_in">abs</span>(sin(<span class="hljs-number">1</span>))) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>)]<br><br><span class="hljs-comment"># 循环左移表</span><br>S = [[<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">toint32</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> n &amp; <span class="hljs-number">0xFFFFFFFF</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">circle_shift</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    x = toint32(x)<br>    <span class="hljs-keyword">return</span> toint32((x &lt;&lt; n) | (x &gt;&gt; (<span class="hljs-number">32</span> - n)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">F</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span>, z: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> (x &amp; y) | ((~x) &amp; z)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">G</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span>, z: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> (x &amp; z) | (y &amp; (~z))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">H</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span>, z: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> x ^ y ^ z<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">I</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span>, z: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> y ^ (x | (~z))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">DF</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span>, b: <span class="hljs-built_in">int</span>, c: <span class="hljs-built_in">int</span>, d: <span class="hljs-built_in">int</span>, Mj: <span class="hljs-built_in">int</span>, S: <span class="hljs-built_in">int</span>, Ti: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">       func: <span class="hljs-built_in">callable</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>    a = func(b, c, d) + Mj + Ti + a<br>    a = circle_shift(a, S)<br>    a = toint32(a + b)<br><br>    <span class="hljs-keyword">return</span> a<br><br>...<br></code></pre></td></tr></table></figure><p>OK，接下来我们来处理512bits的分组。</p><p>如何处理呢？</p><p>前面提到过，我们将512bits的分组分成了16个32bits的子分组。我们要对这16个子分组按照一定的顺序处理。</p><p>子分组处理顺序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每轮处理顺序</span><br>R = [<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],  <span class="hljs-comment"># FF</span><br>    [<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>],  <span class="hljs-comment"># GG</span><br>    [<span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>],  <span class="hljs-comment"># HH</span><br>    [<span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>]  <span class="hljs-comment"># II</span><br>]<br><br></code></pre></td></tr></table></figure><p>每个512bits分组要处理4轮，按照顺序，每轮分别调用FF,GG,HH,II，每轮处理的时候将16个32bits子分组按照上表的顺序传入对应函数，例如：<code>DF(A,B,C,D,Block[R[1][7]], S[1][3], T[23], funcs[1])</code> &#x3D;&gt; <code>GG(A,B,C,D,Block[4],20, T[23])</code></p><p>分组处理函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_blk</span>(<span class="hljs-params">block: array, A: <span class="hljs-built_in">int</span>, B: <span class="hljs-built_in">int</span>, C: <span class="hljs-built_in">int</span>, D: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    AA, BB, CC, DD = A, B, C, D<br>    funcs = [F, G, H, I]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span>):<br>            AA = DF(AA, BB, CC, DD, block[R[i][j + <span class="hljs-number">0</span>]], S[i][<span class="hljs-number">0</span>],<br>                    T[i * <span class="hljs-number">16</span> + j + <span class="hljs-number">0</span>], funcs[i])<br>            DD = DF(DD, AA, BB, CC, block[R[i][j + <span class="hljs-number">1</span>]], S[i][<span class="hljs-number">1</span>],<br>                    T[i * <span class="hljs-number">16</span> + j + <span class="hljs-number">1</span>], funcs[i])<br>            CC = DF(CC, DD, AA, BB, block[R[i][j + <span class="hljs-number">2</span>]], S[i][<span class="hljs-number">2</span>],<br>                    T[i * <span class="hljs-number">16</span> + j + <span class="hljs-number">2</span>], funcs[i])<br>            BB = DF(BB, CC, DD, AA, block[R[i][j + <span class="hljs-number">3</span>]], S[i][<span class="hljs-number">3</span>],<br>                    T[i * <span class="hljs-number">16</span> + j + <span class="hljs-number">3</span>], funcs[i])<br><br>    A = toint32(A + AA)<br>    B = toint32(B + BB)<br>    C = toint32(C + CC)<br>    D = toint32(D + DD)<br><br>    <span class="hljs-keyword">return</span> A, B, C, D<br><br></code></pre></td></tr></table></figure><h5 id="步骤四-拼接"><a href="#步骤四-拼接" class="headerlink" title="步骤四 拼接"></a>步骤四 拼接</h5><p>最后，我们把数据分成512bits一组，把所有分组处理完后，把A，B，C，D四个寄存器内容拼接起来就得到了128位的md5值了。</p><p>md5函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_md5</span>(<span class="hljs-params">_data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    data = array(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)<br>    data.frombytes(_data)<br>    pad = get_pad(data)<br>    data.extend(pad)<br>    data = array(<span class="hljs-string">&#x27;L&#x27;</span>, data.tobytes())  <span class="hljs-comment"># 转换成32bits一组</span><br>    n = data.buffer_info()[<span class="hljs-number">1</span>] // <span class="hljs-number">16</span>  <span class="hljs-comment">#计算block的数目，一个block为512 = 16 * 32bits</span><br>    AA, BB, CC, DD = A, B, C, D<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>        block = data[i * <span class="hljs-number">16</span>:(i + <span class="hljs-number">1</span>) * <span class="hljs-number">16</span>]<br>        AA, BB, CC, DD = process_blk(block, AA, BB, CC, DD)<br><br>    <span class="hljs-keyword">return</span> array(<span class="hljs-string">&#x27;L&#x27;</span>, [AA, BB, CC, DD]).tobytes().<span class="hljs-built_in">hex</span>()<br><br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>让我们来测试一下结果如何：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>    val1 = get_md5(data)<br>    val2 = md5(data).hexdigest()<br>    <span class="hljs-keyword">assert</span> val1 == val2<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;get_md5&#x27;</span>:&lt;<span class="hljs-number">12</span>&#125;</span> -&gt; <span class="hljs-subst">&#123;val1&#125;</span>\n<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;hashlib.md5&#x27;</span>:&lt;<span class="hljs-number">12</span>&#125;</span> -&gt; <span class="hljs-subst">&#123;val2&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    plain = <span class="hljs-string">&quot;Hello,I am Otirik~&quot;</span><br>data = plain.encode()<br>    <span class="hljs-built_in">print</span>(test(data))<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">get_md5</span>      -&gt;</span> <span class="hljs-number">334</span>ec12acf1d613de814c117d0fa6865<br><span class="hljs-function"><span class="hljs-title">hashlib</span>.md5  -&gt;</span> <span class="hljs-number">334</span>ec12acf1d613de814c117d0fa6865<br></code></pre></td></tr></table></figure><p>结果一致，成功实现md5算法!</p><p>End~</p>]]></content>
    
    
    
    <tags>
      
      <tag>hash</tag>
      
      <tag>算法</tag>
      
      <tag>加密</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
